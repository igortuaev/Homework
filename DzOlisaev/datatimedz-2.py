from datetime import datetime
import datetime
from datetime import date, datetime, timedelta
from  datetime import timedelta, date
import time #Импортирую модуль
import datetime


'''1.Изучить модуль datetime'''
'''Ну допустим изучили'''


'''2.Написать функцию, которая по переданной ей дате определяет, является ли год этой даты високосным.'''
'''def visokosni(date0):
    """
    Определяет, является ли год указанной даты високосным.

    Параметры:
    date0 (str): Дата в формате 'дд.мм.гггг'.

    Возвращает:
    bool: True, если год високосный, иначе False.
    """
    date_one = datetime.strptime(date0, '%d.%m.%Y') #Преобразуем дату из строки в объект datetime
    year = int(date_one.strftime("%Y")) #Получаем год из даты
    if date(year, 12, 31) - date(year, 1, 1) == timedelta(365): #Если год является високосным (366 дней), возвращаем True, иначе False
        return True
    else:
        return False
print(visokosni('09.11.2028'))'''


'''3.Вычислить количество дней (часов/минут), прошедших с начала года.'''

now = datetime.datetime.now() #Получаем текущую дату
def count(y, m, d, h, mi, tochnost):
    """
    Эта функция вычисляет разницу в секундах, часах или днях между указанной датой и началом года.

    Параметры:
    y (int): Год.
    m (int): Месяц.
    d (int): День.
    h (int): Час.
    mi (int): Минута.
    tochnost (str): Точность вычисления. Может принимать значения 'day', 'hour' или 'minute'.

    Возвращает:
    float: Разница в секундах, часах или днях в зависимости от указанной точности.
    """
    start_year = datetime.datetime(y, 1, 1, 00, 00, 00)  # Начало года
    date = datetime.datetime(y, m, d, h, mi, 00)  # Указанная дата
    raznost = date - start_year  # Разница в днях, часах и минутах
    sek = datetime.timedelta.total_seconds(raznost)  # Преобразование разницы в секунды

    # Вычисление разницы в зависимости от указанной точности
    if tochnost == 'day':
        return sek // 86400  #Возвращение разницы в днях
    elif tochnost == 'hour':
        return sek // 3600  #Возвращение разницы в часах
    elif tochnost == 'minute':
        return sek // 60  #Возвращение разницы в минутах


'''4.Вычислить количество секунд, прошедших с начала эпохи Unix (1 января 1970).'''
def unix():
    """
    Эта функция вычисляет количество секунд, прошедших с начала эпохи Unix (1 января 1970).

    Возвращает:
    float: Количество секунд, прошедших с начала эпохи Unix.
    """
    import datetime
    first_date = datetime.datetime(1970, 1, 1)  # Начало эпохи Unix
    second_date = datetime.datetime.now()  # Текущая дата
    delta = second_date - first_date  # Разница в днях, часах, минутах и секундах
    sec = datetime.timedelta.total_seconds(delta)  # Преобразование разницы в секунды
    return sec  # Возвращение количества секунд

'''6.Дан список студентов, содержащий их фамилии, имена и даты рождения (dd.mm.yyyy). Напишите программу, которая будет находить самого старшего 
студента из этого списка и выводить его фамилию, имя и дату рождения, а если имеется несколько старших студентов с одинаковой датой рождения, 
то определять их дату рождения и количество. Пример: “Иванов Иван 12.09.2000”, и т.д.'''

def maxdt(s):
    """
    Эта функция находит самого старшего студента(ов) из заданного списка студентов,
    где каждый студент представлен фамилией, именем и датой рождения (дд.мм.гггг).
    Если есть несколько старших студентов с одинаковой датой рождения,
    функция определит их дату рождения и количество.

    Параметры:
    s (list): Список строк, где каждая строка представляет студента в формате "Фамилия Имя дд.мм.гггг".

    Возвращает:
    str или кортеж: Если есть только один старший студент, функция возвращает строку в формате "Фамилия Имя дд.мм.гггг".
                    Если есть несколько старших студентов, функция возвращает кортеж (старшие_даты, количество),
                    где старшие_даты - список самых старших дат и количество - число студентов с этими датами.
    """
    s1 = []  # Список для хранения разделенных данных о студентах
    s3 = []  # Список для хранения преобразованных дат
    s4 = []  # Список для хранения самых старших дат

    # Разделение данных о студентах и преобразование дат в объекты datetime.date
    for i in range(len(s)):
        s1 += s[i].split()
        s2 = s1[2::3]
        s3 += [datetime.strptime(s2[i], '%d.%m.%Y').date()]

    # Нахождение самой старшей даты
    t = min(s3)

    # Нахождение всех студентов с самой старшей датой
    for i in range(len(s3)):
        if t == s3[i]:
            s4 += [s3[i]]
            l = i

    # Возвращение самого старшего студента(ов)
    if len(s4) > 1:
        return s4, len(s4)
    else:
        return s[l]










'''#8.Для заданного года посчитать количество выходных дней в этом году (то есть количество суббот и воскресений).'''
def nc(Y):
    """
    Вычисляет количество выходных дней (суббот и воскресений) в указанном году.
    Параметры:
    Y (int): Год, для которого необходимо посчитать выходные дни.
    Возвращает:
    int: Количество выходных дней в указанном году.
    """
   
    s = 0 #Инициализируем счетчик выходных дней
    date_one = date(Y, 1, 1) #Устанавливаем начальную дату
    while date_one < date(Y, 12, 31): #Проходим по всем дням указанного года
        day_first = date_one.strftime("%w") #Получаем номер дня недели (0 - воскресенье, 6 - суббота)
        if int(day_first) == 0 or int(day_first) == 6: #Если день недели - суббота или воскресенье, увеличиваем счетчик
            s += 1
        date_one += timedelta(1) #Переходим к следующему дню
    return s #Возвращаем количество выходных дней
print(nc(2024))