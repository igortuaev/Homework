'''дан список из строк. Вывести из списка только те элементы, которые содержат символ B'''
string_list = ['Apple', 'Banana', 'Cherry', 'Blueberry']

filtered_list = [s for s in string_list if 'B' in s]


filter_listF = list(filter(lambda s: 'b' in s, string_list))


print(filtered_list)


'''дан список из строк. Вывести список, состоящий из символов в верхнем регистре'''

output_listU = list(map(lambda s: s.upper(), string_list))
output_list = [s.upper() for s in string_list]
print(output_list)

'''Даны два списка чисел. Получить список, состоящий из суммы квадратов соответствующих элементов исходных списков'''

s1 = [1, 2, 3, 4]
s2 = [4, 3, 2, 1, 0, -1]

output_list = list(map(lambda a1, a2: a1**2 + a2**2, s1, s2))
output_listG = [s1[i]**2 + s2[i]**2 for i in range(min(len(s1), len(s2)))]

print(output_listG)


'''Даны 3 списка чисел. Вывести список, который содержит периметр треугольника, составленного из соответствующих элементов исходных списков в том случае если это возможно, если невозможно, то 0.'''
def triangle_perimeter(list1, list2, list3):
    """Вычисляет периметр треугольника, если это возможно.

    Args:
        list1: Первый список чисел (стороны треугольника).
        list2: Второй список чисел (стороны треугольника).
        list3: Третий список чисел (стороны треугольника).

    Returns:
        Список, содержащий периметры треугольников, 
        образованных соответствующими элементами 
        исходных списков. Если треугольник нельзя 
        построить, возвращается 0 для этого набора сторон.
        Если списки разной длины, возвращается [0].
    """

    try:
        sides = list(zip(list1, list2, list3))
        perimeters = []
        for a, b, c in sides:
            if a + b > c and a + c > b and b + c > a:
                perimeters.append(a + b + c)
            else:
                perimeters.append(0)
        return perimeters
    except IndexError:  # Если списки разной длины
        return [0]


# def triangle_perimeter(list1, list2, list3):
#     """Вычисляет периметр треугольника, если это возможно.

#     Args:
#         list1: Первый список чисел (стороны треугольника).
#         list2: Второй список чисел (стороны треугольника).
#         list3: Третий список чисел (стороны треугольника).

#     Returns:
#         Список, содержащий периметры треугольников, 
#         образованных соответствующими элементами 
#         исходных списков. Если треугольник нельзя 
#         построить, возвращается 0 для этого набора сторон.
#         Если списки разной длины, возвращается [0].
#     """
#     try:
#         return [(a + b + c) if (a + b > c and a + c > b and b + c > a) else 0
#                 for a, b, c in zip(list1, list2, list3)]
#     except IndexError:
#         return [0]





'''Даны два списка чисел. Сформировать список, составленный из остатков от деления элементов первого списка на соответствующие элементы второго списка'''
def remainders(list1, list2):
    """Вычисляет остатки от деления элементов первого списка на элементы второго.

    Args:
        list1: Первый список чисел (делимые).
        list2: Второй список чисел (делители).
s
    Returns:
        Список, содержащий остатки от деления.
        Возвращает "Деление на ноль невозможно!", если во втором списке есть 0.
        Возвращает "Списки разной длины!", если списки имеют разную длину.
    """
    try:
        return list(map(lambda x, y: x % y, list1, list2))
    except ZeroDivisionError: # Если во втором списке есть 0
        return "Деление на ноль невозможно!"
    except IndexError:  # Если списки разной длины
        return "Списки разной длины!"


# def remainders(list1, list2):
#     """Вычисляет остатки от деления элементов первого списка на элементы второго.

#     Args:
#         list1: Первый список чисел (делимые).
#         list2: Второй список чисел (делители).

#     Returns:
#         Список, содержащий остатки от деления.
#         Возвращает "Деление на ноль невозможно!", если во втором списке есть 0.
#         Возвращает "Списки разной длины!", если списки имеют разную длину.
#     """
#     try:
#         return [x % y for x, y in zip(list1, list2)]
#     except ZeroDivisionError:
#         return "Деление на ноль невозможно!"
#     except IndexError:
#         return "Списки разной длины!"




'''Даны два списка чисел. Сформировать список, содержащий только те элементы первого списка, которые есть во втором списке'''
def common_elements(list1, list2):    
    """Возвращает элементы первого списка, которые есть во втором.

    Args:
        list1: Первый список.
        list2: Второй список.

    Returns:
        Список, содержащий элементы, присутствующие в обоих списках.
    """
    return list(filter(lambda x: x in list2, list1))

# def common_elements(list1, list2):
#     """Возвращает элементы первого списка, которые есть во втором.

#     Args:
#         list1: Первый список.
#         list2: Второй список.

#     Returns:
#         Список, содержащий элементы, присутствующие в обоих списках.
#     """
#     return [x for x in list1 if x in list2]




'''Даны два списка чисел. Сформировать список, содержащий только те элементы первого списка, которых нет во втором списке'''

def unique_elements(list1, list2):
    """Возвращает элементы первого списка, которых нет во втором.

    Args:
        list1: Первый список.
        list2: Второй список.

    Returns:
        Список, содержащий элементы, присутствующие только в первом списке.
    """
    return list(filter(lambda x: x not in list2, list1))

# def unique_elements(list1, list2):
#     """Возвращает элементы первого списка, которых нет во втором.

#     Args:
#         list1: Первый список.
#         list2: Второй список.

#     Returns:
#         Список, содержащий элементы, присутствующие только в первом списке.
#     """
#     return [x for x in list1 if x not in list2]


'''Дан список натуральных чисел. Выбрать из этого списка в новый список только простые числа из исходного списка'''
number_list = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

def is_prime(n):
    '''
    Проверяет, является ли число простым.
    
    Вход:
    n (int) - число для проверки
    
    Выход:
    bool - True, если число является простым, иначе False
    '''
    if n == 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

prime_list = [n for n in number_list if is_prime(n)]

prime_listF = list(filter(is_prime, number_list))
print(prime_list)

 