'''Дано натуральное число. Вычислите сумму его цифр'''


def sum_of_digits(n: int) -> int:
    """
    Вычисляет сумму цифр заданного натурального числа рекурсивно.

    :param n: Натуральное число, для которого нужно найти сумму цифр.
    :return: Сумма цифр числа n.
    :raises ValueError: Если n не является натуральным числом.
    """
    # Проверка, что число натуральное
    if n <= 0:
        raise ValueError("Число должно быть натуральным (больше 0).")
    
    # Базовый случай: если число состоит из одной цифры, возвращаем его
    if n < 10:
        return n
    
    # Рекурсивный случай: берем последнюю цифру (n % 10) и вызываем функцию для оставшейся части числа (n // 10)
    return (n % 10) + sum_of_digits(n // 10)


'''Дано натуральное число. Записать число в обратном порядке'''
def reverse_number(n: int) -> int:
    """
    Записывает натуральное число в обратном порядке рекурсивно.

    :param n: Натуральное число, которое нужно перевернуть.
    :return: Число, записанное в обратном порядке.
    :raises ValueError: Если n не является натуральным числом.
    """
    # Проверка, что число натуральное
    if n <= 0: 
        raise ValueError("Число должно быть натуральным (больше 0).")
    
    # Базовый случай: если число состоит из одной цифры, возвращаем его
    if n < 10:
        return n

    # Определяем количество цифр в числе
    num_digits = len(str(n))
    
    # Последняя цифра становится первой: (n % 10) * 10^(num_digits-1)
    # Остальное число рекурсивно обрабатывается
    return (n % 10) * (10 ** (num_digits - 1)) + reverse_number(n // 10)

'''Проверить число на простоту'''
def is_prime(n: int, divisor: int = None) -> bool:
    """
    Проверяет, является ли заданное число простым, используя рекурсию.

    :param n: Число для проверки.
    :param divisor: Делитель, который проверяется (по умолчанию n-1).
    :return: True, если число простое, иначе False.
    :raises ValueError: Если n меньше 2.
    """
    # Простые числа начинаются с 2
    if n < 2:
        raise ValueError("Число должно быть больше или равно 2.")
    
    # Устанавливаем начальный делитель
    if divisor is None:
        divisor = n - 1

    # Базовый случай: если делитель дошел до 1, число простое
    if divisor == 1:
        return True

    # Если число делится на текущий делитель, оно не простое
    if n % divisor == 0:
        return False

    # Рекурсивно проверяем следующий делитель
    return is_prime(n, divisor - 1)



# Пример использования
if __name__ == "__main__":

    #1
    number = 12345
    result = sum_of_digits(number)
    print(f"Сумма цифр числа {number} равна {result}")

    #2
    reversed_number = reverse_number(number)
    print(f"Число {number} в обратном порядке: {reversed_number}")


    #3
    number = 29
    result = is_prime(number)
    print(f"Число {number} {'простое' if result else 'не является простым'}.")


